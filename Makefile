PREFIX=github.com/kwkoo
PACKAGE=pipelinerestrictor
PROJECT=$(PACKAGE)
APP_NAME=$(PACKAGE)
SERVICE_NAME=$(PACKAGE)
SECRET_NAME=$(PACKAGE)
ROLE_NAME=$(PACKAGE)
ROLE_BINDING_NAME=$(PACKAGE)
SERVICE_CN=$(SERVICE_NAME).$(PROJECT).svc
GVR_GROUP=kwkoo.github.com
GVR_VERSION=v1beta1
RESOURCE_NAME=requests
PIPELINE_PROJ=dev


GOPATH:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
GOBIN=$(GOPATH)/bin
IMAGENAME="kwkoo/$(PACKAGE)"
VERSION="0.1"

# go run $(GOPATH)/src/$(PREFIX)/$(PACKAGE)/cmd/$(PACKAGE)/main.go
.PHONY: run build clean image deploy cleanopenshift
run: certificates/certificate.pem
	@cd $(GOPATH)/src/$(PREFIX)/$(PACKAGE)/cmd/$(PACKAGE) && KUBECONFIG=${HOME}/.kube/config \
	  go run main.go \
	    --tls-cert-file $(GOPATH)/certificates/certificate.pem \
	    --tls-private-key-file $(GOPATH)/certificates/key.pem \
	    --secure-port 8443 \
	    --logtostderr \
	    --v 9

build: bin/$(PACKAGE)

bin/$(PACKAGE):
	@echo "Cross compiling..."
	@CGO_ENABLED=0 GOOS=linux GOPATH=$(GOPATH) GOBIN=$(GOBIN) go build \
	  -a \
	  -installsuffix cgo \
	  -o $(GOBIN)/$(PACKAGE) $(PREFIX)/$(PACKAGE)

clean:
	-rm -rf $(GOPATH)/bin/$(PACKAGE) $(GOPATH)/pkg/* $(GOPATH)/certificates

image: bin/$(PACKAGE)
	docker build --rm -t $(IMAGENAME):$(VERSION) $(GOPATH)

# This is only needed if you are running the web server locally. The web
# server should have a certificate generated by the service-ca controller
# if deployed on OpenShift.
certificates/certificate.pem:
	@echo "Generating self-signed certificate..."
	@-rm -rf $(GOPATH)/certificates
	@mkdir -p $(GOPATH)/certificates
	openssl req \
	  -newkey rsa:2048 \
	  -nodes \
	  -keyout $(GOPATH)/certificates/key.pem \
	  -x509 \
	  -days 365 \
	  -out $(GOPATH)/certificates/certificate.pem \
	  -subj "/CN=$(SERVICE_CN)"
	openssl x509 \
	  -text \
	  -noout \
	  -in $(GOPATH)/certificates/certificate.pem

deploy:
	@echo "Deploying to OpenShift..."
	-oc new-project $(PROJECT)

	# Create a role for the webhook server's kubeclient.
	-oc create clusterrole $(ROLE_NAME) --verb=get,list,watch --resource=pods

	# Bind the role to the service account running the webhook server.
	oc adm policy add-cluster-role-to-user \
	  $(ROLE_NAME) \
	  system:serviceaccount:$(PROJECT):default

	# Permissions required for the extension api server
	# - https://kubernetes.io/docs/tasks/access-kubernetes-api/setup-extension-api-server/
	oc adm policy add-cluster-role-to-user \
	  system:auth-delegator \
	  system:serviceaccount:$(PROJECT):default
	-oc create rolebinding \
	  -n kube-system \
	  $(ROLE_BINDING_NAME) \
	  --role=extension-apiserver-authentication-reader \
	  --serviceaccount=$(PROJECT):default
	
	# Allow the webhook user to have permissions in the pipeline project
	# so that it can list and cancel pipelineruns.
	oc policy add-role-to-user \
	  -n $(PROJECT) \
	  edit \
	  system:serviceaccount:$(PIPELINE_PROJ):default

	oc new-build \
	  --binary \
	  -l app=$(APP_NAME) \
	  -e INSTALL_URL=github.com/kwkoo/$(PACKAGE)/cmd/$(PACKAGE) \
	  -e IMPORT_URL=. \
	  --docker-image=docker.io/kwkoo/go-toolset-7-centos7:1.13 \
	  --name=$(APP_NAME)

	@/bin/echo -n "Waiting for Go imagestreamtag to be created..."
	@while true; do \
	  oc get istag go-toolset-7-centos7:1.13 2>/dev/null 1>/dev/null;  \
	  if [ $$? -eq 0 ]; then /bin/echo "done"; break; fi; \
	  /bin/echo -n "."; \
	  sleep 1; \
	done

	oc start-build \
	  --follow \
	  --from-dir=$(GOPATH)/src \
	  $(APP_NAME)

	oc new-app $(APP_NAME)
	oc set volumes \
	  dc/$(APP_NAME) \
	  --add \
	  -t secret \
	  --secret-name=$(SECRET_NAME) \
	  -m /certificates

	oc expose dc/$(APP_NAME) --port=443 --target-port=8443

	# Add annotation to generate service certificate
	# https://docs.openshift.com/container-platform/4.4/authentication/certificates/service-serving-certificate.html#add-service-certificate_service-serving-certificate
	oc annotate svc/$(APP_NAME) \
	  service.beta.openshift.io/serving-cert-secret-name=$(APP_NAME)

	oc set probe dc/$(APP_NAME) \
	  --readiness \
	  --liveness \
	  --initial-delay-seconds=10 \
	  --get-url=https://:8443/healthz

	# The route is only for testing purposes
	# - you can remove it after deployment.
	#oc create route passthrough --service=$(SERVICE_NAME)

apiextension: deploy
	@/bin/echo -n "Waiting for webhook pod to be ready..."
	@while true; do \
	  if [ "`oc get po | grep $(APP_NAME) | grep -v -- -build | grep -v -- -deploy | awk '{ print $$2 }'`" = "1/1" ]; then \
	  	/bin/echo "done"; \
		break; \
	  fi; \
	  /bin/echo -n "."; \
	  sleep 5; \
	done
	@echo "Registering API Server Extension..."
	sed \
	  -e 's/GVR_GROUP/$(GVR_GROUP)/' \
	  -e 's/GVR_VERSION/$(GVR_VERSION)/' \
	  -e 's/PROJECT/$(PROJECT)/' \
	  -e 's/SERVICE_NAME/$(SERVICE_NAME)/' \
	  yaml/apiserver.yaml \
	| \
	oc apply -f -

webhook: apiextension
	@echo "Registering Validating Admission Webhook..."
	sed \
	  -e 's/WEBHOOK_NAME/$(SERVICE_NAME)/' \
	  -e 's/GVR_GROUP/$(GVR_GROUP)/' \
	  -e 's/GVR_VERSION/$(GVR_VERSION)/' \
	  -e 's/RESOURCE_NAME/$(RESOURCE_NAME)/' \
	  yaml/webhook.yaml \
	| \
	oc apply -f -

cleanopenshift: clean
	-oc delete ValidatingWebhookConfiguration $(SERVICE_NAME)
	-oc delete APIService $(GVR_VERSION).$(GVR_GROUP)
	-oc delete project $(PROJECT)
	-oc delete -n kube-system rolebinding $(ROLE_BINDING_NAME)
	-oc delete clusterrole $(PACKAGE)
	oc project default

logs:
	@oc logs -n $(PROJECT) -f `oc get po -n $(PROJECT) | grep $(APP_NAME) | grep Running | grep -v -- -build | grep -v -- -deploy | awk '{ print $$1 }'`
